import { DefaultAdaptersInfo, } from "@sats-connect/core";
import {} from "@sats-connect/ui";
import Bowser from "bowser";
import { isXverseInAppBrowser } from "./isXverseInAppBrowser.js";
function appStoreUrl(p) {
    const browser = Bowser.getParser(window.navigator.userAgent);
    if (browser.satisfies({
        desktop: {
            chrome: ">=1",
        },
    })) {
        return p.chromeWebStoreUrl;
    }
    if (browser.satisfies({
        desktop: {
            firefox: ">=1",
        },
    })) {
        return p.mozillaAddOnsUrl;
    }
    if (browser.satisfies({
        android: {
            chrome: ">=1",
            safari: ">=1",
        },
    })) {
        return p.googlePlayStoreUrl;
    }
    if (browser.satisfies({
        ios: {
            chrome: ">=1",
            safari: ">=1",
        },
    })) {
        return p.iOSAppStoreUrl;
    }
}
function getInstallPrompt(provider) {
    const url = appStoreUrl(provider);
    if (url)
        return { installPrompt: { url } };
    console.error(`[makeDefaultConfig]: No app store URL found for ${provider.name}.`);
    return {};
}
export function makeDefaultConfig(providers) {
    const config = { options: [] };
    // Xverse
    const xverseProvider = providers.find((provider) => provider.id === DefaultAdaptersInfo.xverse.id);
    config.options.push(xverseProvider
        ? xverseProvider
        : {
            ...DefaultAdaptersInfo.xverse,
            ...getInstallPrompt(DefaultAdaptersInfo.xverse),
        });
    if (isXverseInAppBrowser()) {
        return config;
    }
    // Unisat
    const unisatProvider = providers.find((provider) => provider.id === "unisat");
    if (unisatProvider && unisatProvider.isInstalled) {
        config.options.push(unisatProvider);
    }
    // Rest
    config.options = config.options.concat(providers
        .filter((provider) => {
        return (provider.id !== DefaultAdaptersInfo.xverse.id &&
            provider.id !== "unisat");
    })
        .map((provider) => {
        return {
            ...provider,
            ...(provider.isInstalled ? {} : getInstallPrompt(provider)),
        };
    }));
    return config;
}
